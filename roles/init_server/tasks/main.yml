---

- name: Update repo and upgrade installed packages
  apt:
    update_cache: yes
    upgrade: full
    autoremove: yes
    force: yes
    install_recommends: no
  when: ansible_os_family == "Debian"

- name: Remove unecessary Samba packages
  apt:
    name: samba*
    autoremove: yes
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove potentially harmfull unattended-upgrades
  apt:
    name: unattended-upgrades
    autoremove: yes
    state: absent
  when: ansible_distribution == "Ubuntu"

- name: Remove unecessary samba hooks
  file:
    name: /etc/dhcp/dhclient-enter-hooks.d/samba
    state: absent
  when:  ansible_os_family == "Debian"

- name: Update repo and upgrade installed packages
  yum:
    update_cache: yes
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat"

- name: Create {{ host_user }} group
  group:
    name: "{{ host_user }}"

- name: Create {{ host_user }} user
  user:
    name: "{{ host_user }}"
    group: "{{ host_user }}"
    password: "{{ host_password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
    generate_ssh_key: yes
    shell: /bin/bash
  register: publickey

- name: Save public key to hostvars
  local_action:
    module: lineinfile
    name: "host_vars/{{ inventory_hostname }}"
    regexp: "host_user_public_key:"
    line: "host_user_public_key: {{ publickey.ssh_public_key }}"
  connection: local
  become: no
  when: inventory_hostname in groups.maintenance_sftp

- name: Create SFTP group
  group:
    name: sftpgroup
  when: inventory_hostname in groups.backup_server

- name: Create SFTP users
  user:
    name: "{{ hostvars[item].backup_sftp_user }}"
    group: sftpgroup
    password: "!"
    shell: /sbin/nologin
  with_items: "{{ groups.maintenance_sftp }}"
  when: inventory_hostname in groups.backup_server

- name: add user in sudoers
  lineinfile:
    name: /etc/sudoers
    regexp: "^{{ host_user }}"
    line: "{{ host_user }} ALL=(ALL) ALL"

- name: add public key to authorized keys
  authorized_key:
    key: "{{ depl_ssh_pubkey }}"
    user: "{{ host_user }}"
    exclusive: yes
  tags: sshd

- name: add SFTP users public key to authorized keys
  authorized_key:
    key: "{{ hostvars[item].host_user_public_key }}"
    user: "{{ hostvars[item].backup_sftp_user }}"
    exclusive: yes
  with_items: "{{ groups.maintenance_sftp }}"
  when: inventory_hostname in groups.backup_server
  tags: sshd

- name: Disable access with dsa key
  lineinfile: 
    name: /etc/ssh/sshd_config
    regexp: "HostKey /etc/ssh/ssh_host_dsa_key"
    line: "#HostKey /etc/ssh/ssh_host_dsa_key"
  notify: restart-sshd
  tags: sshd

- name: Disable access with ecdsa key
  lineinfile: 
    name: /etc/ssh/sshd_config
    regexp: "HostKey /etc/ssh/ssh_host_ecdsa_key"
    line: "#HostKey /etc/ssh/ssh_host_ecdsa_key"
  notify: restart-sshd
  tags: sshd

- name: Disable access with password, use key only
  lineinfile: 
    name: /etc/ssh/sshd_config
    regexp: "HostKey /etc/ssh/ssh_host_ed25519_key"
    line: "#HostKey /etc/ssh/ssh_host_ed25519_key"
  notify: restart-sshd
  tags: sshd

- name: configure sshd port
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^Port"
    line: "Port {{ ansible_ssh_port }}"
  notify: restart-sshd
  tags: sshd

- name: Disable ssh root login
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin"
    line: "PermitRootLogin no"
  notify: restart-sshd
  tags: sshd

- name: Disable access with password, use key only
  lineinfile: 
    name: /etc/ssh/sshd_config
    regexp: "^PasswordAuthentication"
    line: "PasswordAuthentication no"
  notify: restart-sshd
  tags: sshd

- name: Enable ssh connection for {{ host_user }} only
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^AllowUsers"
    line: "AllowUsers {{ host_user }}"
  when: inventory_hostname not in groups.backup_server
  notify: restart-sshd
  tags: sshd

- name: Enable ssh connection for {{ host_user }} and SFTP users on Backup server
  blockinfile:
    path: /etc/ssh/sshd_config
    block: |
      AllowUsers {{ host_user }} {{ groups.maintenance_sftp | map('extract', hostvars, ['backup_sftp_user']) | sort | join("  ") }}
      AllowGroups {{ host_user }} sftpgroup

      Match Group sftpgroup
              ChrootDirectory /mnt/vdb/backup/sftp
              ForceCommand internal-sftp
              AllowTcpForwarding no
              GatewayPorts no
              X11Forwarding no
  when: inventory_hostname in groups.backup_server
  notify: restart-sshd
  tags: sshd

- name: Add session timeout
  blockinfile:
    path: /etc/bash.bashrc
    block: |
      TMOUT=900
      readonly TMOUT
      export TMOUT
  when: ansible_os_family == "Debian"

- name: Add session timeout
  blockinfile:
    path: /etc/bashrc
    block: |
      TMOUT=900
      readonly TMOUT
      export TMOUT
  when: ansible_os_family == "RedHat"

- name: check that chroot directory for SFTP users exist
  file:
    name: /mnt/vdb/backup/sftp
    state: directory
    owner: root
    group: root
    mode: 0755
  when: inventory_hostname in groups.backup_server

- name: check that directories for SFTP for Odoo servers exist
  file:
    name: /mnt/vdb/backup/sftp/{{ hostvars[item].inventory_hostname | lower }}
    state: directory
    owner: "{{  hostvars[item].backup_sftp_user }}"
    group: sftpgroup
    mode: 0755
  with_items: "{{ groups.maintenance_sftp | intersect(groups.odoo_server | union(groups.docker_odoo)) }}"
  when: inventory_hostname in groups.backup_server
