---

- name: Update repo and upgrade installed packages
  apt:
    update_cache: yes
    upgrade: full
    autoremove: yes
    force: yes
    install_recommends: no
  when: ansible_os_family == "Debian"

- name: Remove unecessary Samba packages
  apt:
    name: samba*
    autoremove: yes
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove potentially harmfull unattended-upgrades
  apt:
    name: unattended-upgrades
    autoremove: yes
    state: absent
  when: ansible_distribution == "Ubuntu"

- name: Remove unecessary samba hooks
  file:
    name: /etc/dhcp/dhclient-enter-hooks.d/samba
    state: absent
  when:  ansible_os_family == "Debian"

- name: Update repo and upgrade installed packages
  yum:
    update_cache: yes
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat"

- name: Create {{ host_user }} group
  group:
    name: "{{ host_user }}"

- name: Create {{ host_user }} user
  user:
    name: "{{ host_user }}"
    group: "{{ host_user }}"
    password: "{{ host_password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
    generate_ssh_key: yes
    shell: /bin/bash
  register: publickey

- name: Save public key to hostvars for SFTP
  local_action:
    module: lineinfile
    name: "host_vars/{{ inventory_hostname }}"
    regexp: "host_user_public_key:"
    line: "host_user_public_key: {{ publickey.ssh_public_key }}"
  connection: local
  become: no
  when: inventory_hostname in groups.maintenance_sftp

- name: add user in sudoers
  lineinfile:
    name: /etc/sudoers
    regexp: "^{{ host_user }}"
    line: "{{ host_user }} ALL=(ALL) ALL"

- name: add public key to authorized keys
  authorized_key:
    key: "{{ depl_ssh_pubkey }}"
    user: "{{ host_user }}"
    exclusive: yes
  tags: sshd

- name: configure sshd port
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^#?Port"
    line: "Port {{ default_sshd_port }}"
  notify: restart-sshd
  tags: sshd

- name: Disable ssh root login
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^#?PermitRootLogin"
    line: "PermitRootLogin no"
  notify: restart-sshd
  tags: sshd

- name: Disable access with password, use key only
  lineinfile: 
    name: /etc/ssh/sshd_config
    regexp: "^#?PasswordAuthentication"
    line: "PasswordAuthentication no"
  notify: restart-sshd
  tags: sshd

- name: Disable Agent Forwarding
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^#?AllowAgentForwarding"
    line: "AllowAgentForwarding no"
  notify: restart-sshd
  tags: sshd

- name: Disable TCP Forwarding
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^#?AllowTcpForwarding"
    line: "AllowTcpForwarding no"
  notify: restart-sshd
  tags: sshd

- name: Disable X11 Forwarding
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^#?X11Forwarding"
    line: "X11Forwarding no"
  notify: restart-sshd
  tags: sshd

- name: Enable ssh connection for {{ host_user }} only
  lineinfile:
    name: /etc/ssh/sshd_config
    regexp: "^#?AllowUsers"
    line: "AllowUsers {{ host_user }}"
  when: inventory_hostname not in groups.backup_server
  notify: restart-sshd
  tags: sshd

- name: Enable ssh connection for {{ host_user }} and SFTP users on Backup server
  blockinfile:
    path: /etc/ssh/sshd_config
    block: |
      AllowUsers {{ host_user }} {{ groups.maintenance_sftp | map('extract', hostvars, ['backup_sftp_user']) | sort | join("  ") }}
      AllowGroups {{ host_user }} sftpgroup

      Match Group sftpgroup
              ChrootDirectory /mnt/vdb/backup/sftp
              ForceCommand internal-sftp
              AllowTcpForwarding no
              GatewayPorts no
              X11Forwarding no
  when: inventory_hostname in groups.backup_server
  notify: restart-sshd
  tags: sshd

- name: Add session timeout
  blockinfile:
    path: /etc/bash.bashrc
    block: |
      TMOUT=900
      readonly TMOUT
      export TMOUT
  when: ansible_os_family == "Debian"

- name: Add session timeout
  blockinfile:
    path: /etc/bashrc
    block: |
      TMOUT=900
      readonly TMOUT
      export TMOUT
  when: ansible_os_family == "RedHat"

- name: add nfs package
  apt:
    name: nfs-common
    force: yes
    install_recommends: no
  when: inventory_hostname not in groups.backup_server and ansible_os_family == "Debian" and inventory_hostname in groups.maintenance_nfs

- name: Mount NFS share on Odoo servers
  mount: 
    name: /mnt/backup-odoo
    src: "{{ hostvars['Filament_Backup'].ansible_ssh_host }}:/mnt/vdb/backup/{{ inventory_hostname|lower }}"
    fstype: nfs4
    opts: rw,nosuid,noexec
    state: mounted
  when: inventory_hostname in groups.maintenance_nfs | intersect(groups.odoo_server)

- name: Mount NFS share on Bluemind servers
  mount:
    name: /var/backups
    src: "{{ hostvars['Filament_Backup'].ansible_ssh_host }}:/mnt/vdb/backup/{{ inventory_hostname|lower }}"
    fstype: nfs4
    opts: rw,soft,noatime,nodiratime,nosuid,exec
    state: mounted
  when: inventory_hostname in groups.bluemind_server

- name: Create mount directory for backup Odoo docker
  file:
    path: /home/docker/backups/odoo
    state: directory
  when:  inventory_hostname in groups.maintenance_nfs | intersect(groups.docker_odoo)

- name: Mount NFS share for Odoo docker
  mount:
    name: /home/docker/backups/odoo
    src: "{{ hostvars['Filament_Backup'].ansible_ssh_host }}:/mnt/vdb/backup/{{ inventory_hostname|lower }}"
    fstype: nfs4
    opts: rw,nosuid,noexec,noauto
    state: present
  when: inventory_hostname in groups.maintenance_nfs | intersect(groups.docker_odoo)

- name: Copy Installed Package Listing script on server
  template:
    src: collect_installed_packages_facts_{{ ansible_os_family }}.sh.j2
    dest: /root/collect_installed_packages_facts.sh
    owner: root
    group: root
    mode: 0700

- name: add cron job to check installed packages every day
  cron:
    name: collect installed packages facts
    minute: 43
    hour: 0
    job: /root/collect_installed_packages_facts.sh
